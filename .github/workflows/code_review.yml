name: PR Java Code Review with ChatGPT

on:
  pull_request:
    branches:
      - master  # or 'main' if that's your default branch
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch full history
          ref: ${{ github.event.pull_request.head.ref }}  # explicitly checkout PR branch

      - name: Set up JDK 21 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Fetch all branches and the pull request base branch (master or main)
        run: |
          git fetch --all
          git branch -r  # List all remote branches for debugging purposes
          git log --oneline --graph --decorate --all  # Show the commit history for debugging

      - name: Check if master or main exists
        run: |
          # Check if master or main is available
          git branch -r | grep "origin/master" || git branch -r | grep "origin/main"

      - name: Get the merge base between master (or main) and PR branch
        run: |
          # Check if we are working with master or main
          if git branch -r | grep -q "origin/master"; then
            BASE_BRANCH="master"
            elif git branch -r | grep -q "origin/main"; then
          BASE_BRANCH="main"
          else
            echo "Error: Neither master nor main branch found in remote."
            exit 1
          fi

          echo "Using base branch: $BASE_BRANCH"
          
          # Fetch the base branch explicitly
          git fetch origin $BASE_BRANCH

          # Get the merge base commit between base branch and the PR branch (HEAD)
          # Use merge-base from remote base branch
          MERGE_BASE=$(git merge-base origin/$BASE_BRANCH HEAD)
          echo "Merge base is $MERGE_BASE"
          if [ -z "$MERGE_BASE" ]; then
            echo "No merge base found. Exiting..."
            exit 1
          fi

          # Now generate the diff between the merge base and the current HEAD (PR branch)
          git diff --name-only $MERGE_BASE...HEAD | grep '.java$' > java_files.txt
          cat java_files.txt

      - name: Review Java code with ChatGPT
        run: |
          PR_CODE=""
          while read -r file; do
            if [[ -f "$file" ]]; then
              PR_CODE+=$(cat "$file")
              PR_CODE+=$'\n\n'
            fi
          done < java_files.txt

          # Build JSON safely using jq
          JSON=$(jq -n \
            --arg model "text-davinci-003" \
            --arg prompt "Review the following Java code and provide feedback on best practices, possible issues, and improvements:\n\n$PR_CODE" \
            --argjson max_tokens 500 \
            '{model: $model, prompt: $prompt, max_tokens: $max_tokens}')

          echo "Sending the following payload to OpenAI:"
          echo "$JSON"

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON")

          echo "Full OpenAI API response:"
          echo "$RESPONSE"

          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].text')

          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"### ChatGPT Review of the Java Code:\n\n$REVIEW\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
